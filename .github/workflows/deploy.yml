name: CI/CD Pipeline

on:
  push:
    branches: 
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Check out the repository
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.12

    - name: Install Poetry
      run: pip install poetry

    - name: Install dependencies
      run: poetry install

    - name: Set environment variables for testing
      run: |
        echo "DATABASE_URL=mysql+pymysql://mariadb_user:mariadb_password@127.0.0.1:3306/elysian_db" >> $GITHUB_ENV
        echo "OPENAI_API_KEY=test-api-key" >> $GITHUB_ENV

    - name: Run Tests
      env:
        DATABASE_URL: mysql+pymysql://mariadb_user:mariadb_password@127.0.0.1:3306/elysian_db
        OPENAI_API_KEY: test-api-key
      run: poetry run pytest

    - name: Run Black
      run: poetry run black --check .

    - name: Run Isort
      run: poetry run isort --check .

    - name: Run Flake8
      run: poetry run flake8 .

    - name: Run Bandit
      run: poetry run bandit -r .

    - name: Log in to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and Push Docker image
      run: |
        docker build . -t fantinigiovanni/elysian-app:latest
        docker push fantinigiovanni/elysian-app:latest

    - name: Deploy to AWS EC2
      env:
        EC2_HOST: ${{ secrets.EC2_HOST }}
        EC2_USER: ${{ secrets.EC2_USER }}
        EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      run: |
        echo "${{ secrets.EC2_SSH_KEY }}" > ssh_key.pem
        chmod 600 ssh_key.pem

        scp -o StrictHostKeyChecking=no -i ssh_key.pem docker-compose.prod.yml ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:~/docker-compose.yml

        ssh -o StrictHostKeyChecking=no -i ssh_key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
          export DATABASE_URL=${{ secrets.DATABASE_URL }}
          export OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}

          docker-compose -f docker-compose.yml down
          docker-compose -f docker-compose.yml pull
          docker-compose -f docker-compose.yml up -d
        EOF
      shell: bash

    - name: Clean up SSH Key
      run: rm -f ssh_key.pem
      if: always()